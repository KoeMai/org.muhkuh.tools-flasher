# -*- coding: utf-8 -*-
#-------------------------------------------------------------------------#
#   Copyright (C) 2011 by Christoph Thelen                                #
#   doc_bacardi@users.sourceforge.net                                     #
#                                                                         #
#   This program is free software; you can redistribute it and/or modify  #
#   it under the terms of the GNU General Public License as published by  #
#   the Free Software Foundation; either version 2 of the License, or     #
#   (at your option) any later version.                                   #
#                                                                         #
#   This program is distributed in the hope that it will be useful,       #
#   but WITHOUT ANY WARRANTY; without even the implied warranty of        #
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         #
#   GNU General Public License for more details.                          #
#                                                                         #
#   You should have received a copy of the GNU General Public License     #
#   along with this program; if not, write to the                         #
#   Free Software Foundation, Inc.,                                       #
#   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             #
#-------------------------------------------------------------------------#


#----------------------------------------------------------------------------
#
# Set up the Muhkuh Build System.
#

SConscript('mbs/SConscript')
Import('env_default')

tExoRaw = env_default.GetTool('exoraw-2.0.7_2')
tExoRaw.ApplyToEnv(env_default)

import os.path
import spi_flashes
spi_flashes.ApplyToEnv(env_default)


#----------------------------------------------------------------------------
# This is the list of sources. The elements must be separated with whitespace
# (i.e. spaces, tabs, newlines). The amount of whitespace does not matter.
flasher_sources_common = """
	src/cfi_flash.c
	src/delay.c
	src/spi_flash.c
	src/exodecr.c
	src/flasher_parflash.c
	src/flasher_spi.c
	src/i2c_hifsta.c
	src/init_netx_test.S
	src/main.c
	src/netx_consoleapp.c
	src/progress_bar.c
	src/rdyrun.c
	src/sfdp.c
	src/spansion.c
	src/spi_macro_player.c
	src/strata.c
	src/systime.c
	src/units.c
	src/uprintf.c
	src/sha1_arm/sha1.c
	src/sha1_arm/sha1_arm.S
"""




flasher_sources_custom_netx4000 = """
	src/netx4000/board.c
	src/netx4000/flasher_header.c
	src/drv_spi_hsoc_v2.c
	src/drv_sqi.c
	src/mmio.c
	src/pl353_nor.c
"""

src_netx4000  = flasher_sources_common + flasher_sources_custom_netx4000


#----------------------------------------------------------------------------
#
# Get the source code version from the VCS.
#
env_default.Version('targets/version/flasher_version.h', 'templates/flasher_version.h')
env_default.Version('targets/version/flasher_version.xsl', 'templates/flasher_version.xsl')


#----------------------------------------------------------------------------
#
# Create the compiler environments.
#

env_default.Append(CPPDEFINES = [['CFG_INCLUDE_SHA1', '1']])

env_netx4000_default = env_default.CreateCompilerEnv('4000', ['arch=armv7', 'float-abi=hard', 'fpu=vfpv3-d16', 'thumb'])
env_netx4000_default['CCFLAGS'][-4] = '-march=armv7-r'
env_netx4000_default.Replace(LDFILE = File('src/netx4000/netx4000.ld'))
env_netx4000_default.Append(CPPPATH = ['src', 'src/netx4000', 'src/sha1_arm', 'targets/spi_flash_types', 'targets/version'])


## Create an environment with the 4.9.3.1 compiler.
#env_tmp = env_default.Clone()
#tGccCortex = env_tmp.GetTool('gcc-arm-none-eabi-4.9.3_1')
#tGccCortex.ApplyToEnv(env_tmp)
#
## Restore the CCFLAGS from env_default.
#print("copying CCFLAGS from default env:")
#for i in range(1, len(env_default['CCFLAGS'])):
#	print(env_default['CCFLAGS'][i])
#	env_tmp['CCFLAGS'].append( env_default['CCFLAGS'][i] )
#
## Create the actual netx 4000 compiler env.
#env_netx4000_default = env_tmp.CreateCompilerEnv('4000', ['arch=armv7', 'float-abi=hard', 'fpu=vfpv3-d16', 'thumb'])
#env_netx4000_default['CCFLAGS'][-4] = '-march=armv7-r'
#env_netx4000_default.Append(CPPDEFINES = [['ASIC_TYP', '4000']]) 
#env_netx4000_default.Replace(LDFILE = File('src/netx4000/netx4000.ld'))
#env_netx4000_default.Append(CPPPATH = ['src', 'src/netx4000', 'src/sha1_arm', 'targets/spi_flash_types', 'targets/version'])
#
#print("env_netx4000_default:")
#for i in range(1, len(env_netx4000_default['CCFLAGS'])):
#	print(env_netx4000_default['CCFLAGS'][i])
#

#----------------------------------------------------------------------------
#
# Create the list of known SPI flashes.
#

srcSpiFlashes = env_netx4000_default.SPIFlashes('targets/spi_flash_types/spi_flash_types.c', 'src/spi_flash_types.xml')
objSpiFlashes = env_netx4000_default.Object('targets/spi_flash_types/spi_flash_types.o', srcSpiFlashes[0])
# Extract the binary.
binSpiFlashes = env_netx4000_default.ObjCopy('targets/spi_flash_types/spi_flash_types.bin', objSpiFlashes)
# Pack the binary with exomizer.
exoSpiFlashes = env_netx4000_default.Exoraw('targets/spi_flash_types/spi_flash_types.exo', binSpiFlashes)
# Convert the packed binary to an object.
objExoSpiFlashes = env_netx4000_default.ObjImport('targets/spi_flash_types/spi_flash_types_exo.o', exoSpiFlashes)


#----------------------------------------------------------------------------
#
# Build the flasher without debug messages.
#

env_netx4000_nodbg = env_netx4000_default.Clone()
env_netx4000_nodbg.Append(CPPDEFINES = [['CFG_DEBUGMSG', '0']])
src_netx4000_nodbg = env_netx4000_nodbg.SetBuildPath('targets/netx4000_nodbg', 'src', src_netx4000)
elf_netx4000_nodbg = env_netx4000_nodbg.Elf('targets/netx4000_nodbg/flasher_netx4000.elf', src_netx4000_nodbg + objExoSpiFlashes)
bin_netx4000_nodbg = env_netx4000_nodbg.ObjCopy('targets/flasher_netx4000.bin', elf_netx4000_nodbg)

#----------------------------------------------------------------------------
#
# Build the flasher with debug messages.
#


env_netx4000_dbg = env_netx4000_default.Clone()
env_netx4000_dbg.Append(CPPDEFINES = [['CFG_DEBUGMSG', '1']])
src_netx4000_dbg = env_netx4000_dbg.SetBuildPath('targets/netx4000_dbg', 'src', src_netx4000)
elf_netx4000_dbg = env_netx4000_dbg.Elf('targets/netx4000_dbg/flasher_netx4000_debug.elf', src_netx4000_dbg + objExoSpiFlashes)
bin_netx4000_dbg = env_netx4000_dbg.ObjCopy('targets/flasher_netx4000_debug.bin', elf_netx4000_dbg)


#----------------------------------------------------------------------------
#
# Generate the LUA scripts from the template.
# This extracts symbols and enumeration values from the ELF file and inserts
# them into the LUA script.
#
lua_flasher = env_netx4000_nodbg.GccSymbolTemplate('targets/lua/flasher.lua', elf_netx4000_nodbg, GCCSYMBOLTEMPLATE_TEMPLATE='templates/flasher.lua')

#----------------------------------------------------------------------------
#
# Build the documentation.
#

tDocSpiFlashTypesHtml = env_default.XSLT('targets/doc/spi_flash_types.html', ['src/spi_flash_types.xml', 'src/spi_flash_types_html.xsl'])
tDocSpiFlashListTxt = env_default.XSLT('targets/doc/spi_flash_types.txt', ['src/spi_flash_types.xml', 'src/spi_flash_types_txt.xsl'])


# Get the default attributes.
aAttribs = env_default['ASCIIDOC_ATTRIBUTES']
# Add some custom attributes.
aAttribs.update(dict({
	# Use ASCIIMath formulas.
	'asciimath': True,

	# Embed images into the HTML file as data URIs.
	'data-uri': True,

	# Use icons instead of text for markers and callouts.
	'icons': True,

	# Use numbers in the table of contents.
	'numbered': True,
	
	# Generate a scrollable table of contents on the left of the text.
	'toc2': True,

	# Use 4 levels in the table of contents.
	'toclevels': 4
}))

doc = env_default.Asciidoc('targets/doc/flasher.html', 'README.asciidoc', ASCIIDOC_BACKEND='html5', ASCIIDOC_ATTRIBUTES=aAttribs)


#----------------------------------------------------------------------------
#
# Build the artifact.
#

aArtifactServer = ('nexus@netx01', 'muhkuh', 'muhkuh_snapshots')
strArtifactGroup = 'tools.muhkuh.org'
strArtifactId = 'flasher'


tArcList0 = env_default.ArchiveList('zip')

tArcList0.AddFiles('netx/',
	bin_netx4000_nodbg)

tArcList0.AddFiles('netx/debug/',
	bin_netx4000_dbg)

tArcList0.AddFiles('doc/',
	doc,
	tDocSpiFlashTypesHtml,
	tDocSpiFlashListTxt)

tArcList0.AddFiles('lua/',
	lua_flasher,
	'lua/flasher_test.lua')

tArcList0.AddFiles('demo/',
	'lua/cli_flash.lua',
	'lua/demo_getBoardInfo.lua',
	'lua/erase_complete_flash.lua',
	'lua/erase_first_flash_sector.lua',
	'lua/flash_parflash.lua',
	'lua/flash_serflash.lua',
	'lua/get_erase_areas_parflash.lua',
	'lua/identify_parflash.lua',
	'lua/identify_serflash.lua',
	'lua/is_erased_parflash.lua',
	'lua/read_bootimage.lua',
	'lua/read_complete_flash.lua')

tArcList0.AddFiles('',
	'ivy/org.muhkuh.tools.flasher/install.xml')


aArtifactGroupReverse = strArtifactGroup.split('.')
aArtifactGroupReverse.reverse()

strArtifactPath = 'targets/ivy/repository/%s/%s/%s' % ('/'.join(aArtifactGroupReverse),strArtifactId,PROJECT_VERSION)
tArc0 = env_default.Archive(os.path.join(strArtifactPath, '%s-%s.zip' % (strArtifactId,PROJECT_VERSION)), None, ARCHIVE_CONTENTS=tArcList0)
tIvy0 = env_default.Version(os.path.join(strArtifactPath, 'ivy-%s.xml' % PROJECT_VERSION), 'ivy/%s.%s/ivy.xml' % ('.'.join(aArtifactGroupReverse),strArtifactId))

env_default.AddArtifact(tArc0, aArtifactServer, strArtifactGroup, strArtifactId, PROJECT_VERSION, 'zip')
env_default.AddArtifact(tIvy0, aArtifactServer, strArtifactGroup, strArtifactId, PROJECT_VERSION, 'ivy')

tArtifacts = env_default.Artifact('targets/artifacts_flasher.xml', None)


#----------------------------------------------------------------------------
#
# Prepare the build folders for the other artifacts.
#

Command('targets/ivy/ivysettings.xml', 'ivy/ivysettings.xml', Copy("$TARGET", "$SOURCE"))
Command('targets/ivy/flasher_cli/ivy-report.xsl', 'ivy/ivy-report.xsl', Copy("$TARGET", "$SOURCE"))

Command('targets/ivy/flasher_cli/build.xml', 'ivy/flasher_cli/build.xml', Copy("$TARGET", "$SOURCE"))
env_default.Version('targets/ivy/flasher_cli/ivy.xml', 'ivy/flasher_cli/ivy.xml')
env_default.Version('targets/artifacts_flasher_cli.xml', 'ivy/flasher_cli/artifacts_flasher_cli.xml')


#----------------------------------------------------------------------------
#
# Make a local demo installation.
#
# Copy all binaries.
Command('targets/testbench/netx/flasher_netx4000.bin',bin_netx4000_nodbg,  Copy("$TARGET", "$SOURCE"))

# Copy all debug binaries.
Command('targets/testbench/netx/debug/flasher_netx4000_debug.bin',bin_netx4000_dbg,  Copy("$TARGET", "$SOURCE"))

# Copy all LUA modules.
Command('targets/testbench/lua/flasher.lua', lua_flasher, Copy("$TARGET", "$SOURCE"))

# Copy all LUA scripts.
Command('targets/testbench/cli_flash.lua',                'lua/cli_flash.lua', Copy("$TARGET", "$SOURCE"))
Command('targets/testbench/demo_getBoardInfo.lua',        'lua/demo_getBoardInfo.lua', Copy("$TARGET", "$SOURCE"))
Command('targets/testbench/erase_complete_flash.lua',     'lua/erase_complete_flash.lua', Copy("$TARGET", "$SOURCE"))
Command('targets/testbench/erase_first_flash_sector.lua', 'lua/erase_first_flash_sector.lua', Copy("$TARGET", "$SOURCE"))
Command('targets/testbench/flash_parflash.lua',           'lua/flash_parflash.lua', Copy("$TARGET", "$SOURCE"))
Command('targets/testbench/flash_serflash.lua',           'lua/flash_serflash.lua', Copy("$TARGET", "$SOURCE"))
Command('targets/testbench/flasher_test.lua',             'lua/flasher_test.lua', Copy("$TARGET", "$SOURCE"))
Command('targets/testbench/get_erase_areas_parflash.lua', 'lua/get_erase_areas_parflash.lua', Copy("$TARGET", "$SOURCE"))
Command('targets/testbench/identify_parflash.lua',        'lua/identify_parflash.lua', Copy("$TARGET", "$SOURCE"))
Command('targets/testbench/identify_serflash.lua',        'lua/identify_serflash.lua', Copy("$TARGET", "$SOURCE"))
Command('targets/testbench/is_erased_parflash.lua',       'lua/is_erased_parflash.lua', Copy("$TARGET", "$SOURCE"))
Command('targets/testbench/read_bootimage.lua',           'lua/read_bootimage.lua', Copy("$TARGET", "$SOURCE"))
Command('targets/testbench/read_complete_flash.lua',      'lua/read_complete_flash.lua', Copy("$TARGET", "$SOURCE"))
