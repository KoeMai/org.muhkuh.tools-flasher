netX flasher
============
Doc Bacardi <doc_bacardi@sourceforge.net>
:Author Initials: DB


== About

The flasher is a program for the netX network controllers from Hilscher (http://www.hilscher.com).
It's main use case is writing a bootable image to an SPI or parallel flash.

In general the flasher works with flash devices. It can...

 * Read data from the device
 * Write data from the device
 * Erase the complete device or parts of it
 * Build a checksum over the device contents

Some common use cases are:

 * Write a Hilscher 2ndStage loader to the SPI flash.
 * Write a custom firmware.
 * Add a serial number to a pre-burned flash image.

The flasher is a stand-alone application. It does not require an OS like rcX or WindowsCE.

The recommended way to use the flasher is a LUA script on a standard PC. The chapter XYZ has more details on this topic.

It is also possible to run the flasher without LUA. This is described in the chapter XYZ.

If you would like to modify the flasher, it is necessary to build it from the sources. The chapter <<Building_the_flasher_from_source>> gives more details on the build process.
The most common modification is the addition of new SPI flash types. Please see chapter XYZ for more details about this task.


[[Building_the_flasher_from_source, Building the flasher from source]]
== Building the flasher from source

Building the netX flasher is currently supported on Linux operating systems and some versions of Windows. Please note that the following versions of Windows are not supported:

 * Windows Vista
 * Windows 7
 * Windows Server 2008

To compile the netX flasher you need only 1 tool: Python. A small python script will take care of the rest of the dependencies.

Recommended versions:

 * Python >= 2.6

[IMPORTANT]
Please note that Python3 is not yet supported. At the time of writing most tools used in the build process are not ready for Python3.


=== Setting up the build system on Linux

Most distributions have python preinstalled. Try to execute the command `python --version` in a shell. This will print the python version if it is installed.

-----------------------------------------------------------------------------
 hindin:/home/brynhild$ python --version
 Python 2.6.6
-----------------------------------------------------------------------------

If no python is installed, search the list of available software packets for the term 'python'.

.Example for debian based systems
-----------------------------------------------------------------------------
 apt-get install python
-----------------------------------------------------------------------------

If you prefer to install python by hand:

 1. Python 2.x.x: http://www.python.org/download . The source package has build instructions.


=== Setting up the build system on Windows

Download and install the packages from the following locations:

 1. Python 2.x.x: http://www.python.org/download . The installer presents several features to be installed. You can save disk space and select only "Register Extensions". You do not need "Tcl/Tk", "Documentation", "Utility Scripts" and the "Test Suite".


=== Compile

Open a command line window and change to the folder where you unpacked the flasher sources. There is a file named 'setup.xml'. Run the command 'python mbs/mbs' there. After some time and a lot of output, the target folder contains the binaries and this documentation.

.Example output of the build process on linux
-----------------------------------------------------------------------------
 hindin:/home/brynhild/flasher$ python mbs/mbs
 Processing package scons-local, version 2.3.0_1
 The package is not in the repository. It must be downloaded.
 Trying repository at http://downloads.sourceforge.net/project/muhkuh/mbs/...
 sizTotal 41
   0% 
 sizTotal 318035
   0% ..................................................
  32% ..................................................
  64% ..................................................
  96% .....
 The checksums match: OK!
 Unpacking...
 Installed package.
 Processing package asciidoc, version 8.6.8_1
[...]
-----------------------------------------------------------------------------


.List of produced files
 * `targets/flasher_netx10.bin` : the netX10 version
 * `targets/flasher_netx10_debug.bin` : the netX10 version with a lot of debug output
 * `targets/flasher_netx500.bin` : the netX500 version
 * `targets/flasher_netx500_bob.bin` : the netX500 version for the BOB project
 * `targets/flasher_netx500_debug.bin` : the netX500 version with a lot of debug output
 * `targets/flasher_netx50.bin` : the netX50 version
 * `targets/flasher_netx50_debug.bin` : the netX50 version with a lot of debug output
 * `targets/flasher_netx56.bin` : the netX51/52 version
 * `targets/flasher_netx56_debug.bin` : the netX51/52 version with a lot of debug output
 * `targets/lua/flasher.lua` : LUA support routines for the Muhkuh testing environment
 * `targets/doc/flasher.html` : this documentation
 * `targets/doc/README.rst` : a short introduction of the flasher for the Sourceforge download page
 * `targets/doc/spi_flash_list.txt` : a list of all supported SPI flashes which do not support the SFDP autodetection (this list contains only the names)
 * `targets/doc/spi_flash_types.html` : a list of all supported SPI flashes which do not support the SFDP autodetection (this list contains a lot of details)


== Adding new flash devices

The flasher works with 2 types of flash devices:

 * serial flashes on the SPI bus
 * parallel NOR flashes

Both types are auto-detected by the flasher. The following chapters describe how this works and how new flashes are added.


=== SPI flashes

SPI flashes are detected in 2 steps: first the flasher tries a built-in list of known devices. Every entry in the list has a description how the flash can be identified in a hopefully unambiguous way.
If no entry in this list matches, the SFDP protocol is used. SFDP is a JEDEC standard (JESD216A) and provides all kind information about the flash: the capacity, the maximum clock
frequency, command bytes for common operations and information about multiline capabilities of the device (2bit or 4bit modes).

SFDP is exactly the standard which a tool like the flasher needs. It is easy to implement as it is not (yet) cluttered with vendor specific extensions like CFI. It looks like the perfect replacement for
the big and clumsy build-in list of known devices. Unfortunately this is not possible at the moment. SFDP came out in 20XX (TODO: Add year here). This means there are still a lot of flash devices on the market which
do not support this protocol. We still need the build-in list.

If you have an SPI flash and would like to use it with the flasher there are several ways to find out if it is already supported. If you have a netX board assembled with the flash, it is simple:
just run the LUA script `identify_serflash.lua` from the flasher distribution. If the flash is supported, a big OK appears.

Doing a test run is the prefered way to check if a flash device is supported by the flasher. If this works, there is no doubt left. Unfortunately in some cases this is not possible.
Still there are some ways:

 . Check the datasheet of the device for SFDP support.
 . Every release of the flasher comes with a file named `spi_flash_list.txt`. This file shows all flash devices in the build-in list. Check if the flash is listed there.

If both approaches failed, it looks like the device is not supported yet. As it does not support the SFDP protocol, it must be added to the build-in list. The chapter <<The_build_in_list_of_known_devices>> describes
how to do this. Please consider to contribute your changes back to the flasher project. This has the benefit that all future releases will support your flash device out of the box.

If you run into problems adding the description, you can ask for help on the
flasher mailing (TODO: add link) list or issue a feature request (TODO: add link).
But please note that this is a non-profit open source project. We can not
guarantee a response time of X hours or such things. The netX support at
Hilscher will be happy to help you in these cases (TODO: add link).


[[The_build_in_list_of_known_devices,The build-in list of known devices]]
==== The build-in list of known devices

Adding a new SPI flash device to the flasher is a real simple task. All
definitions are stored in a simple XML file. There is no need to write C code.
It is required to run the build system though, which is described in the
chapter <<Building the flasher from source>>.

[TIP]
Please check the datasheet of the flash device for the SFDP protocol. If the
device supports it, there is no need to add the device to the XML file. It
will be completely autodetected with the SFDP protocol.

The name of the XML file is `spi_flash_types.xml`. It is located in the `src`
subfolder of the source distribution of the flasher. It is not part of the
executable distribution of the flasher. Here is a link the latest version in
the Mercurial repository: http://hg.code.sf.net/p/muhkuh/flasher/raw-file/tip/src/spi_flash_types.xml[src/spi_flash_types.xml].

The root node of the XML file is named `KnownSerialFlashes`. All flash
definitions are direct child nodes of the root node. They are named
`SerialFlash`.

Here are example definitions for two common devices in netX designs: the
Winbond W25Q32 and the Atmel AT45DB321E.

[source,xml]
.XML definition for the Winbond W25Q32
-----------------------------------------------------------------------------
        <SerialFlash name="W25Q32" size="4194304" clock="80000">
                <Description>Winbond W25Q32</Description>
                <Note></Note>
                <Layout pageSize="256"
                        sectorPages="16"
                        mode="linear" />
                <Read readArrayCommand="0x03" ignoreBytes="0" />
                <Write writeEnableCommand="0x06"
                       pageProgramCommand="0x02"
                       bufferFillCommand=""
                       bufferWriteCommand=""
                       eraseAndPageProgramCommand="" />
                <Erase erasePageCommand=""
                       eraseSectorCommand="0x20"
                       eraseChipCommand="0xc7" />
                <Status readStatusCommand="0x05"
                        statusReadyMask="0x01"
                        statusReadyValue="0x00" />
                <Init0 command="" />
                <Init1 command="" />
                <Id send="0x9f, 0x00, 0x00, 0x00"
                    mask="0x00, 0xff, 0xff, 0xff"
                    magic="0x00, 0xef, 0x40, 0x16" />
        </SerialFlash>
-----------------------------------------------------------------------------

[source,xml]
.XML definition for the Atmel AT45DB321E
-----------------------------------------------------------------------------
        <SerialFlash name="AT45DB321E" size="4325376" clock="50000">
                <Description>Adesto AT45DB321E</Description>
                <Note>NOTE: this must be before the Atmel ATDB321B type,
                      or this will never match</Note>
                <Layout pageSize="528"
                        sectorPages="8"
                        mode="pagesize bitshift" />
                <Read readArrayCommand="0x03" ignoreBytes="0" />
                <Write writeEnableCommand=""
                       pageProgramCommand=""
                       bufferFillCommand="0x84"
                       bufferWriteCommand="0x88"
                       eraseAndPageProgramCommand="0x82" />
                <Erase erasePageCommand="0x81"
                       eraseSectorCommand="0x50"
                       eraseChipCommand="0xc7, 0x94, 0x80, 0x9a" />
                <Status readStatusCommand="0xd7"
                        statusReadyMask="0xbc"
                        statusReadyValue="0xb4" />
                <Init0 command="" />
                <Init1 command="" />
                <Id send="0x9f, 0x00, 0x00, 0x00, 0x00, 0x00"
                    mask="0x00, 0xff, 0xff, 0xff, 0xff, 0xff"
                    magic="0x00, 0x1f, 0x27, 0x01, 0x01, 0x00" />
        </SerialFlash>
-----------------------------------------------------------------------------


In general a definition covers the following topics:

 * A short name and a description of the device
 * Notes
 * The capacity in bytes
 * The maximum clock frequency
 * Geometry options (page and sector size)
 * Command bytes
 * Initialisation sequences
 * Identification sequences

All of these values can be extracted straight forward from the datasheet. The following chapters give more information about each topic.

[TIP]
In the `src` folder is also a schema definition in the file
`spi_flash_types.xsd`. Some editors support a validation of an XML file with
the help of such a schema file. Use it to check your modifications.


==== name and description

The name is a short identifier for the device. It must only contain alphanumeric characters and underscores. Furthermore it must be unique in the complete list.
The name is used in some other tools like the Bootwizzard (TODO: add link) to select an entry.

The description is a full text description of the flash device. In general this should be the more verbose form of the name. There are no limitations for the text.

The following example shows the position of the name and description.

[source,xml,numbered]
.Position of the name and description in the XML definition
-----------------------------------------------------------------------------
        <SerialFlash name="W25Q32<1>" size="4194304" clock="80000">
                <Description>Winbond W25Q32</Description><2>
                <Note></Note>
                <Layout pageSize="256"
                        sectorPages="16"
                        mode="linear" />
-----------------------------------------------------------------------------

<1> The name of the device
<2> The description of the device


==== notes

Notes are informative entries meant for developers. They are not shown to the users of the flasher, but they are part of the HTML list of the build-in devices.
One flash description can have more than one note in separate `Note` nodes.

The following example shows the position of the notes:

[source,xml]
.Position of the notes in the XML definition
-----------------------------------------------------------------------------
        <SerialFlash name="AT45DB321E" size="4325376" clock="50000">
                <Description>Adesto AT45DB321E</Description>
                <Note>NOTE: this must be before the Atmel ATDB321B type,
                      or this will never match</Note><1>
                <Layout pageSize="528" sectorPages="8" mode="pagesize bitshift" />
                <Read readArrayCommand="0x03" ignoreBytes="0" />
-----------------------------------------------------------------------------

<1> A note entry for the device.


==== capacity

The capacity in bytes is simply the amout of bytes the device can store. The following example shows the capacity for the Winbond W25Q32. It has 4194304 bytes, which is exactly 4MB.

[NOTE]
Please note that the capacity must be specified as a single number. Any
suffixes like "kB" or "MB" can not be used.

[source,xml,numbered]
.Position of the capacity in the XML definition
-----------------------------------------------------------------------------
        <SerialFlash name="W25Q32" size="4194304<1>" clock="80000">
                <Description>Winbond W25Q32</Description>
                <Note></Note>
                <Layout pageSize="256"
                        sectorPages="16"
                        mode="linear" />
-----------------------------------------------------------------------------

<1> The capacity in bytes.

[NOTE]
Not all devices have a capacity which equals asciimath:[2^x]. Atmel data flashes for example have a capacity which is a multiple of 528 bytes.


==== maximum frequency

The maximum frequency is specified in kHz. The following example has a value
of `80000`. This means the W25Q32 has a maximum operating frequency of
80000kHz, which equals 80MHz.

[IMPORTANT]
Some flash devices have more than one maximum operating frequency. A common
example for this case are read commands which have several "don't care bytes"
before the data. These special read commands can operate at a higher speed
than the rest of the commands. Please note that the flasher uses only one
maximum frequency. It must fit for all commands - also the slow ones.

[source,xml,numbered]
.Position of the maximum frequency in the XML definition
-----------------------------------------------------------------------------
        <SerialFlash name="W25Q32" size="4194304" clock="80000<1>">
                <Description>Winbond W25Q32</Description>
                <Note></Note>
                <Layout pageSize="256"
                        sectorPages="16"
                        mode="linear" />
-----------------------------------------------------------------------------

<1> The maximum frequency.

[NOTE]
The flasher will use the highest possible frequency to access the device. This
is limitated by the netX SPI controller. In general it is only 25 or 33MHz
depending on the netX type (netX500, netX100, netX50, etc.). However this does
not affect the overall performance of the flasher very much. The transfer times
on the SPI bus are minimal compared to the write and especially erase times for
current flash devices.


==== Geometry options

The geometry options of a flash describe the addressing scheme and the
organisation of the data in erase and write blocks.

The first geometry option is the page size. This describes how many bytes can
be written to the flash in one chunk. This is not unlimited as the data must
be buffered in the device for the flashing procedure. The value is specified
in bytes. It can be found in the datasheet at the description of the write
command. The Winbond W25Q32 for example can write up to 256 bytes at once.

In contrast to EEPROM devices most flash devices can not erase a single byte
without touching the rest of the data. The flash is rather organized in so
called erase blocks. An erase block can only be erased completely.
The second geometry option describes the size of an erase block. It is called
`sectorPages` and is specified as a multiplier for the page size. A value of
"16" means 16 times the size of a page. In the example below this results in
asciimath:[16 * 256 = 4096].

[NOTE]
Modern flash devices provide several different sized erase blocks. The Winbond
W25Q32 for example has 3 different ones: 4kB, 32kB and 64kB. The best practice
in this case is to choose the smallest value which is larger than or equal to
the page size. For the W25Q32 this is 4kB which equals 4096 bytes. The reason
for this is the best tradeoff between speed and granularity. If the erase
block is too small, it will take a lot of commands to erase a large area. More
commands means that more time is needed. A large erase block would take not so
many commands. It is faster. On the other hand the granularity goes down with
a large erase block. This comes into account if an erase operation does not
start or end at the border of an erase block. In this case the rest of the
affected blocks must also be erased. If there is important content, it must be
preserved "by hand". This takes more time for larger blocks.


[source,xml,numbered]
.The geometry options in the XML definition
-----------------------------------------------------------------------------
        <SerialFlash name="W25Q32" size="4194304" clock="80000">
                <Description>Winbond W25Q32</Description>
                <Note></Note>
                <Layout pageSize="256<1>"
                        sectorPages="16<2>"
                        mode="linear<3>" />
                <Read readArrayCommand="0x03" ignoreBytes="0" />
                <Write writeEnableCommand="0x06"
                       pageProgramCommand="0x02<4>"
                       bufferFillCommand="<5>"
                       bufferWriteCommand="<6>"
                       eraseAndPageProgramCommand="" />
                <Erase erasePageCommand=""
                       eraseSectorCommand="0x20"
                       eraseChipCommand="0xc7" />
                <Status readStatusCommand="0x05"
-----------------------------------------------------------------------------

<1> The page size in bytes.
<2> The number of pages per sector.
<3> The addressing mode.





== Using the flasher

The flasher itself is a program for


=== Using the flasher with LUA.

[source,lua]
-----------------------------------------------------------------------------
require("flasher")


if #arg~=1 then
	error("Missing parameter: file to flash.")
end
strFileName = arg[1]


tPlugin = tester.getCommonPlugin()
if not tPlugin then
	error("No plugin selected, nothing to do!")
end


-- Flash the file.
local tBus = flasher.BUS_Spi
local ulUnit = 0
local ulChipSelect = 0
flasher.simple_flasher(tPlugin, strFileName, tBus, ulUnit, ulChipSelect, "netx/")

print("")
print(" #######  ##    ## ")
print("##     ## ##   ##  ")
print("##     ## ##  ##   ")
print("##     ## #####    ")
print("##     ## ##  ##   ")
print("##     ## ##   ##  ")
print(" #######  ##    ## ")
print("")

-- Disconnect the plugin.
tester.closeCommonPlugin()
-----------------------------------------------------------------------------

 
=== Using the flasher as a standalone application:

 1. Download the flasher to the netx with the a jtag debugger or the netxusbmon tool. The load address is 0x8000.

 1. Write the parameters for your flash operation to a free place in the IntRam (like 0x00017000). They include:
   * device to flash the data to (Spi flash, parallel flash, etc...)
   * size of the data to flash (in bytes)
   * offset in this device (in bytes)

   Below is an example for the parameters.

 1. Download your data to a free ram area in the netX, preferably the SDRam. Please don't forget to set up the SDRam controller first.

 1. Execute the flasher and pass the address of the parameters in the register R0. The result of the flash operation is written to the parameter field (see below), progress output is on Uart0 with 115.2k, 8N1. The execution address is 0x8000 (same as the load address).


=== Parameter details

All parameters are 32 bit values (dwords). The first part of the parameter block is a general header, the second part contain the flash specific settings:

.Header
[cols="<,<",frame="topbot",options="header"]
|==========================
|Offset/Bytes | Meaning
|      `0x00` | Return value, `0` means success, failure otherwise (should be cleared with `0xffffffff` before start)
|      `0x04` | Address of the flash specific parameters.
|      `0x08` | Reserved (init with `0x00000000`)
|==========================


.Flash specific settings
[cols="<,<",frame="topbot",options="header"]
|==========================
|Offset/Bytes | Meaning
|      `0x00` | parameter version
|      `0x04` | operation mode
|      `0x08` | start address of the data
|      `0x0c` | size (in bytes) of the data
|      `0x10` | device typ
|      `0x14` | device offset (in bytes)
|==========================

=== Parameter Version

The current version of the parameter block is 1.0 . The version number before the dot is the major, the part behind
the dot is the minor, so 1.0 has a major of 1 and a minor of 0. The version number is encoded in a dword as

 'major' * 65536 + 'minor'

or in C syntax: ('major'<<16)|'minor'

Example: The version number 1.2 is encoded as `0x00010002`.


=== Device Typ:

[cols="<,<",frame="topbot",options="header"]
|==========================
|  Id | Meaning
| `0` | reserved, do not use
| `1` | parallel flash on sram bus, chip select 0
| `2` | SPI flash, chip select 0
| `3` | I2C eeprom
| `4` | reserved, do not use
| `5` | reserved, do not use
| `6` | reserved, do not use
| `7` | reserved, do not use
|==========================


=== Operation Mode

The operation mode selects the action which is executed by the flasher tool:

 OperationMode_Flash  = 0     flash data to the device
 OperationMode_Erase  = 1     erase a region of (or the complete) the device
 OperationMode_Read   = 2     read the contents of the device
 OperationMode_Verify = 3     compare the device contents with provided data

.Example Lauterbach script.
-----------------------------------------------------------------------------
 // clear return value
 data.set 0x00017000 %LONG 0xffffffff
 // set input parameter address of flasher parameter block)
 data.set 0x00017004 %LONG 0x0001700c
 // clear return message
 data.set 0x00017008 %LONG 0x00000000

 // param version
 data.set 0x0001700C %LONG 0x00010000
 // operation mode is flash
 data.set 0x00017010 %LONG 0
 // data pointer
 data.set 0x00017014 %LONG 0x80000000
 // data byte size
 data.set 0x00017018 %LONG &binfile_size
 // source type is SPI
 data.set 0x0001701C %LONG &BootBlockSrcType_SPI
 // dst dev offset
 data.set 0x00017020 %LONG 0
-----------------------------------------------------------------------------


=== Example for the parameters
A data block of 0x3000 bytes should be flashed to the beginning of the SPI flash. The data is downloaded to the start of the SDRam. The parameter header is written to 0x00017000, the flash specific settings are placed right behind the header (0x0001700c).

[cols=">m,>m,<",frame="topbot",options="header"]
|============================================================================
|    Address |      Value | Meaning
| 0x00017000 | 0xffffffff | clear return value
| 0x00017004 | 0x0001700c | address of the flash specific parameters
| 0x00017008 | 0x00000000 | clear return message
|            |            |
| 0x0001700c | 0x00010000 | parameter version is 1.0
| 0x00017010 | 0x00000000 | set operation mode to "flash data"
| 0x00017014 | 0x80000000 | pointer to the start of the data
| 0x00017018 | 0x00003000 | size of the data in bytes
| 0x0001701c | 0x00000002 | device typ is SPI flash
| 0x00017020 | 0x00000000 | start offset in the SPI flash
|============================================================================

After both the flasher and your data is downloaded to the netX memory and the parameters are set, load the address of the parameter block (in this example `0x00017000`) into the CPU register `R0` and execute the flasher at address `0x8000`. When the call returns, the first entry of the parameters (the return value) contains the result of the operation. A `0` means success, other values indicate a failure. For detailed messages, connect Uart0 of the netX with a "Nullmodem Cable" to your PC and configure your COM port to 115.2K, 8 databits, no parity and 1 Stopbit (8N1).
The output of a successful flash operation looks like this:

.Example flasher output.
-----------------------------------------------------------------------------
  . *** Flasher start ***
  . Data pointer:    0x00017000
  . Init parameter:  0x0001700C

  . Application parameters:
  . data start:    0x80000000
  . data size:     0x00006020
  . boot type:     0x00000002
  . device offset: 0x00000000

  . Boot type :SPI flash
  . Detecting SPI flash...
  . ok, found AT45DB321B
  . Check size...
  . data size:  0x00006020
  . flash size: 0x00420000
  . ok, data fits into flash
  . Erase flash...
  . erase done
  . Write data...
  % 00000000/0000002F
  % 00000026/0000002F
  % 0000002F/0000002F
  . write done
  . Verify data...
  % 00000000/00000061
  % 00000061/00000061
  . verify ok
  * OK *
-----------------------------------------------------------------------------

